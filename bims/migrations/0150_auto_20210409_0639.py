# Generated by Django 2.2.12 on 2021-04-09 06:39

import bims.models.download_request
import colorfield.fields
import datetime
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import uuid
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('td_biblio', '0007_merge_20200529_0332'),
        ('documents', '0030_auto_20200305_1520'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('preferences', '0002_auto_20181220_0803'),
        ('wagtailimages', '0022_uploadedimage'),
        ('bims', '0149_auto_20190702_0147'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlgaeData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curation_process', models.CharField(blank=True, max_length=100, null=True)),
                ('indicator_chl_a', models.CharField(blank=True, default='', max_length=100, verbose_name='Biomass Indicator: Chl A')),
                ('indicator_afdm', models.CharField(blank=True, default='', max_length=100, verbose_name='Biomass Indicator: Ash Free Dry Mass')),
                ('ai', models.FloatField(blank=True, null=True, verbose_name='Autotrophic Index (AI)')),
            ],
            options={
                'verbose_name': 'Algae data',
                'verbose_name_plural': 'Algae data',
            },
        ),
        migrations.CreateModel(
            name='BaseMapLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('title', models.CharField(max_length=256, unique=True)),
                ('source_type', models.CharField(choices=[('xyz', 'XYZ'), ('bing', 'BingMaps'), ('osm', 'OSM'), ('stamen', 'Stamen')], max_length=100)),
                ('layer_name', models.CharField(blank=True, default='', help_text='Only for Stamen base layer', max_length=100)),
                ('attributions', models.TextField(blank=True, default='')),
                ('url', models.URLField(blank=True, null=True)),
                ('key', models.CharField(blank=True, default='', help_text='Key is required if the source of the map is Bing', max_length=256)),
                ('additional_params', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('default_basemap', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='BimsDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, null=True)),
                ('author', models.CharField(blank=True, max_length=512, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BimsDocumentAuthorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField(default=1)),
                ('bimsdocument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.BimsDocument')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bims_bimsdocument_authors',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('intro_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Chem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chem_code', models.CharField(max_length=100)),
                ('chem_description', models.CharField(blank=True, max_length=200, null=True)),
                ('chem_unit', models.CharField(blank=True, choices=[('MEQ_L', 'meq/l'), ('PERCENT', '%'), ('PH_UNIT', 'pH unit'), ('PH_UNITS', 'pH units'), ('NTU', 'NTU'), ('MS_M', 'mS/m'), ('MG_L', 'mg/l'), ('MG_L_5_DAYS', 'mg/l (5 days)'), ('PER_100_ML', 'Per 100ml'), ('M', 'm'), ('OC', 'degrees C'), ('APHA_UNITS', 'APHA units'), ('MG_S', 'mg/s'), ('MG_M2', 'mg/m2'), ('M_S', 'm/s')], max_length=200, null=True)),
                ('decimal_place', models.IntegerField(blank=True, null=True)),
                ('minimum', models.FloatField(blank=True, null=True)),
                ('maximum', models.FloatField(blank=True, null=True)),
                ('show_in_abiotic_list', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Chemistry unit',
                'verbose_name_plural': 'Chemistry units',
            },
        ),
        migrations.CreateModel(
            name='ChemicalRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('value', models.FloatField(blank=True, null=True)),
                ('additional_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('chem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemical_collection_record', to='bims.Chem')),
            ],
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.CharBlock(classname='full title')), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('paragraph_raw_html', wagtail.core.blocks.RawHTMLBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DashboardConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified', models.DateTimeField(default=datetime.datetime.now)),
                ('additional_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dashboard Configuration',
                'verbose_name_plural': 'Dashboard Configurations',
            },
        ),
        migrations.CreateModel(
            name='DatabaseRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DownloadRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(default=datetime.datetime.now)),
                ('request_file', models.FileField(help_text='Only csv file', max_length=300, null=True, upload_to='request-files/', validators=[bims.models.download_request.validate_file_extension])),
                ('processing', models.BooleanField(default=True)),
                ('approved', models.BooleanField(default=False)),
                ('request_category', models.CharField(default='', max_length=256)),
                ('rejected', models.BooleanField(default=False)),
                ('rejection_message', models.TextField(blank=True, null=True)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='download_request_requester', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Download request',
                'verbose_name_plural': 'Download requests',
                'ordering': ('-request_date',),
            },
        ),
        migrations.CreateModel(
            name='HarvestSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=datetime.datetime.now)),
                ('category', models.CharField(blank=True, choices=[('gbif', 'GBIF')], default='', max_length=50)),
                ('finished', models.BooleanField(default=False)),
                ('canceled', models.BooleanField(default=False)),
                ('log_file', models.FileField(null=True, upload_to='harvest-session-log/')),
                ('status', models.TextField(blank=True, null=True)),
                ('harvester', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='harvest_session_harvester', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IngestedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('is_valid', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField()),
                ('data_key', models.CharField(blank=True, max_length=255, null=True)),
                ('category', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'Ingested data',
            },
        ),
        migrations.CreateModel(
            name='LocationContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, default='', max_length=255)),
                ('fetch_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='LocationContextFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('display_order', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='LocationContextFilterGroupOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_display_order', models.IntegerField()),
                ('show_in_dashboard', models.BooleanField(default=False, help_text='Show this location context group in dashboard')),
                ('show_in_side_panel', models.BooleanField(default=False, help_text='Show this location context group in side panel')),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.LocationContextFilter')),
            ],
            options={
                'ordering': ['filter__display_order', 'group_display_order'],
            },
        ),
        migrations.CreateModel(
            name='LocationContextGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('key', models.CharField(blank=True, default='', max_length=100)),
                ('geocontext_group_key', models.CharField(blank=True, default='', help_text='Group key from geocontext', max_length=255)),
                ('verified', models.BooleanField(default=False)),
                ('layer_name', models.CharField(blank=True, default='', help_text='Name of the layer (for border)', max_length=255)),
                ('wms_url', models.CharField(blank=True, default='', help_text='WMS URL of the layer (for border)', max_length=255)),
                ('wms_format', models.CharField(blank=True, default='image/png', help_text='WMS format of the layer (for border)', max_length=255)),
                ('layer_identifier', models.CharField(blank=True, default='', help_text='Identifier to retrieve the desired value (for border)', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ManualPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('body', wagtail.core.fields.RichTextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_address', models.CharField(blank=True, max_length=100, null=True)),
                ('server_hostname', models.CharField(blank=True, max_length=100, null=True)),
                ('request_path', models.CharField(blank=True, max_length=255, null=True)),
                ('response_status', models.IntegerField(blank=True, null=True)),
                ('start_time', models.FloatField(blank=True, null=True)),
                ('run_time', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.Preferences')),
                ('site_notice', models.TextField(blank=True, null=True)),
                ('map_default_filters', django.contrib.postgres.fields.jsonb.JSONField(default=[], help_text='Which filters are selected by default, the format must be as follows : [{"filter_key": "sourceCollection", "filter_values": ["bims"]}]')),
                ('default_location_site_cluster', models.CharField(default='default_location_site_cluster', help_text='SQL view name of the location site cluster which used on the map', max_length=100)),
                ('default_data_source', models.CharField(blank=True, help_text='Default data source when adding new collection', max_length=100, null=True)),
                ('default_site_name', models.CharField(blank=True, help_text='Default site name', max_length=150, null=True)),
                ('readme_download', models.FileField(blank=True, help_text='README that bundled with the downloaded occurrence data', null=True, upload_to='')),
                ('taxonomic_upload_template', models.FileField(blank=True, help_text='File template for taxonomic uploader', null=True, upload_to='')),
                ('occurrence_upload_template', models.FileField(blank=True, help_text='File template for occurrence uploader', null=True, upload_to='')),
                ('landing_page_occurrence_records_title', models.CharField(default='BIODIVERSITY OCCURRENCE RECORDS', help_text='Header title for Biodiversity Occurrence Records section in landing page', max_length=150)),
                ('landing_page_partners_title', models.CharField(default='PARTNERS', help_text='Header title for Partners section in landing page', max_length=150)),
                ('spatial_filter_layer_style', models.CharField(blank=True, default='red_outline', help_text='Style name for spatial filter layer', max_length=100)),
                ('github_feedback_repo', models.CharField(blank=True, default='', help_text='Github repo for users`s feedback', max_length=100)),
                ('github_feedback_token', models.CharField(blank=True, default='', help_text='Access token for Github feedback repo', max_length=100)),
                ('geocontext_keys', models.TextField(blank=True, default='political_boundary_group,rainfall_group', help_text='Default location context group keys that will be fetched from Geocontext, separated by commas.')),
                ('recaptcha_site_key', models.CharField(default='', max_length=150)),
                ('recaptcha_secret_key', models.CharField(default='', max_length=150)),
                ('iucn_api_key', models.CharField(default='', help_text='Token key for IUCN api', max_length=255)),
                ('disclaimer_form_text', models.CharField(blank=True, default='I agree to these data being shared via the FBIS platform for visualisation and download by registered FBIS users', max_length=300)),
                ('disclaimer_doc_text', models.CharField(blank=True, default='I hereby confirm that I am the owner of these data and/or document and agree to these being shared via the FBIS platform for download by registered FBIS users.', max_length=300)),
                ('default_basemap', models.CharField(default='Terrain', help_text='The default basemap layer that is displayed on the map', max_length=100)),
                ('default_center_map', models.CharField(default='22.948492328125,-31.12543669218031', max_length=100)),
                ('default_extent_map', models.CharField(default='5.207535937500003,-37.72038269917067,47.3950359375,-18.54426493227018', max_length=100)),
                ('blog_page_link', models.CharField(blank=True, help_text='Link to blog page', max_length=100)),
                ('docs_page_link', models.CharField(blank=True, help_text='Link to docs page', max_length=100)),
                ('site_code_generator', models.CharField(blank=True, choices=[('bims', 'BIMS (2 Site Name + 2 Site Description + Site count)'), ('fbis', 'FBIS (2 Secondary catchment + 4 River + Site count)'), ('rbis', 'RBIS (Catchment + Province ID + District ID + Site count)')], default='bims', help_text='How site code generated', max_length=50)),
                ('base_country_code', models.CharField(blank=True, default='', help_text='Base country code for the site, using ISO 3166-1 (See here for the list : https://wiki.openstreetmap.org/wiki/Nominatim/Country_Codes)', max_length=100)),
                ('show_third_party_layer', models.BooleanField(default=False, help_text='Show third party layer selector in Map screen')),
                ('enable_sass', models.BooleanField(default=False, help_text='Enable or disable SASS')),
                ('enable_download_request_approval', models.BooleanField(default=False, help_text='Download requests must be approved by the staff before they are sent to users')),
                ('show_module_summary_on_dashboard', models.BooleanField(default=False, help_text='Show summative figure for data by taxon group')),
                ('show_summary_data_on_dashboard', models.BooleanField(default=True, help_text='Show summary data on the dashboard (Total Location Sites, Collection Records, Site Visits)')),
                ('enable_remove_all_occurrences_tool', models.BooleanField(default=False, help_text='Enable tool to remove all occurrences for a taxon group')),
                ('github_repo_path', models.CharField(blank=True, default='', help_text='Path to git repository from where the version info can be retrieved', max_length=255)),
            ],
            bases=('preferences.preferences',),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SourceReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
                ('source_name', models.CharField(blank=True, default='', max_length=512)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_bims.sourcereference_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='SurveyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('display_order', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyDataOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=200)),
                ('display_order', models.IntegerField(default=0)),
                ('survey_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.SurveyData')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyDataValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UploadSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, null=True)),
                ('uploaded_at', models.DateTimeField(default=datetime.datetime.now)),
                ('category', models.CharField(blank=True, choices=[('taxa', 'Taxa'), ('collections', 'Collections')], default='', max_length=50)),
                ('processed', models.BooleanField(default=False)),
                ('canceled', models.BooleanField(default=False)),
                ('error_notes', models.TextField(blank=True, null=True)),
                ('progress', models.CharField(blank=True, default='', max_length=200)),
                ('process_file', models.FileField(null=True, upload_to='taxa-file/')),
                ('success_file', models.FileField(blank=True, null=True, upload_to='taxa-file/')),
                ('error_file', models.FileField(blank=True, null=True, upload_to='taxa-file/')),
                ('updated_file', models.FileField(blank=True, null=True, upload_to='taxa-file/')),
            ],
            options={
                'verbose_name': 'Upload Session',
                'verbose_name_plural': 'Upload Sessions',
            },
        ),
        migrations.DeleteModel(
            name='CarouselHeader',
        ),
        migrations.AlterModelOptions(
            name='endemism',
            options={'ordering': ['display_order']},
        ),
        migrations.AlterModelOptions(
            name='taxongroup',
            options={'ordering': ('display_order',)},
        ),
        migrations.AlterModelOptions(
            name='taxonomy',
            options={'verbose_name': 'Taxonomy', 'verbose_name_plural': 'Taxa'},
        ),
        migrations.AlterModelOptions(
            name='visitor',
            options={'ordering': ('-start_time',)},
        ),
        migrations.RemoveField(
            model_name='biologicalcollectionrecord',
            name='category',
        ),
        migrations.RemoveField(
            model_name='biologicalcollectionrecord',
            name='documents',
        ),
        migrations.RemoveField(
            model_name='taxonomy',
            name='documents',
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='abundance_type',
            field=models.CharField(blank=True, choices=[('number', 'Number'), ('percentage', 'Percentage'), ('density', 'Density'), ('species_valve_per_frustule_count', 'Species valve/frustule count'), ('density_cells_per_m2', 'Density (cells/m2)'), ('density_cells_per_mL', 'Density (cells/mL)')], default='number', max_length=50),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='analyst',
            field=models.ForeignKey(blank=True, help_text='The person that did the analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biologicalcollectionrecord_analyst', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='collector_user',
            field=models.ForeignKey(blank=True, help_text='The user object of the actual capturer/collector of this data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biologicalcollectionrecord_collector_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='module_group',
            field=models.ForeignKey(blank=True, help_text='Which module this collection belong to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.TaxonGroup'),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='specific_biotope',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specific_biotope', to='bims.Biotope'),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='substratum',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biotope_substratum', to='bims.Biotope'),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='survey',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biological_collection_record', to='bims.Survey'),
        ),
        migrations.AddField(
            model_name='biotope',
            name='biotope_type',
            field=models.CharField(blank=True, choices=[('broad', 'Broad'), ('specific', 'Specific'), ('substratum', 'Substratum')], max_length=10),
        ),
        migrations.AddField(
            model_name='biotope',
            name='broad',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='biotope',
            name='specific',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='biotope',
            name='substratum',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='endemism',
            name='display_order',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='locationsite',
            name='legacy_river_name',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='locationsite',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner of the site', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonbiodiversitylayer',
            name='get_feature_format',
            field=models.TextField(default='text/plain', max_length=100),
        ),
        migrations.AddField(
            model_name='profile',
            name='role',
            field=models.CharField(blank=True, choices=[('water_resource_manager', 'Water Resource Manager'), ('researcher', 'Researcher'), ('consultant', 'Consultant'), ('conservation_planner', 'Conservation Planner'), ('citizen', 'Citizen'), ('national_park_management', 'National Park management'), ('district_environmental_officer', 'District Environmental Officer'), ('government_staff', 'Government staff'), ('academic_staff', 'Academic staff'), ('policy_maker', 'Policy maker')], max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='samplingmethod',
            name='order',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='samplingmethod',
            name='taxon_group',
            field=models.ManyToManyField(blank=True, null=True, to='bims.TaxonGroup'),
        ),
        migrations.AddField(
            model_name='siteimage',
            name='site_visit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sass.SiteVisit'),
        ),
        migrations.AddField(
            model_name='siteimage',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.Survey'),
        ),
        migrations.AddField(
            model_name='spatialscalegroup',
            name='type',
            field=models.CharField(blank=True, choices=[('input', 'Input'), ('select', 'Select')], max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='survey',
            name='analyst',
            field=models.ForeignKey(blank=True, help_text='The person that did the analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='survey_analyst', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='survey',
            name='collector_string',
            field=models.CharField(blank=True, default='', help_text='Collector name in string value, this is useful for collector values from GBIF and other third party sources', max_length=500, verbose_name='collector or observer'),
        ),
        migrations.AddField(
            model_name='survey',
            name='collector_user',
            field=models.ForeignKey(blank=True, help_text='The user object of the actual capturer/collector of this data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='survey_collector_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='survey',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='survey',
            name='ready_for_validation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='survey',
            name='rejected',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='survey',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='survey', to='bims.LocationSite'),
        ),
        migrations.AddField(
            model_name='survey',
            name='validated',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='survey',
            name='validation_message',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='taxongroup',
            name='display_order',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='additional_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Additional json data'),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='gbif_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Json data from gbif'),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='import_date',
            field=models.DateField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='legacy_canonical_name',
            field=models.CharField(blank=True, default='', max_length=700, verbose_name='Legacy Canonical Name'),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='origin',
            field=models.CharField(blank=True, choices=[('alien', 'Non-Native'), ('indigenous', 'Native'), ('unknown', 'Unknown'), ('alien-invasive', 'Non-native: invasive'), ('alien-non-invasive', 'Non-native: non-invasive')], default='', help_text='Origin', max_length=50),
        ),
        migrations.AddField(
            model_name='taxonomy',
            name='verified',
            field=models.BooleanField(default=False, help_text='The data has been verified'),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='abundance_number',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='collection_habitat',
            field=models.CharField(blank=True, choices=[('euryhaline', 'Euryhaline'), ('freshwater', 'Freshwater')], default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='collector',
            field=models.CharField(blank=True, default='', help_text='Collector name in string value, this is useful for collector values from GBIF and other third party sources', max_length=300, verbose_name='collector or observer'),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='institution_id',
            field=models.CharField(default='bims', help_text='An identifier for the institution having custody of the object(s) or information referred to in the record.', max_length=200, verbose_name='Custodian'),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='original_species_name',
            field=models.CharField(blank=True, default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='reference',
            field=models.CharField(blank=True, default='', max_length=300),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='reference_category',
            field=models.CharField(blank=True, default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='sampling_effort',
            field=models.CharField(blank=True, default='', max_length=50),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='sampling_method_string',
            field=models.CharField(blank=True, default='', max_length=50),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='source_collection',
            field=models.CharField(blank=True, default='', help_text='e.g. SANBI', max_length=200),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='taxonomy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.Taxonomy', verbose_name='Taxonomy'),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='upstream_id',
            field=models.CharField(blank=True, default='', help_text='Upstream id, e.g. Gbif key', max_length=200),
        ),
        migrations.AlterField(
            model_name='biologicalcollectionrecord',
            name='uuid',
            field=models.CharField(blank=True, help_text='Collection record uuid', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='biotope',
            name='additional_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True),
        ),
        migrations.AlterField(
            model_name='biotope',
            name='biotope_form',
            field=models.CharField(blank=True, choices=[('0', '0'), ('1', '1'), ('2', '2')], max_length=2),
        ),
        migrations.RemoveField(
            model_name='biotope',
            name='taxon_group',
        ),
        migrations.AddField(
            model_name='biotope',
            name='taxon_group',
            field=models.ManyToManyField(blank=True, null=True, to='bims.TaxonGroup'),
        ),
        migrations.AlterField(
            model_name='csvdocument',
            name='csv_file',
            field=models.FileField(upload_to='csv/'),
        ),
        migrations.AlterField(
            model_name='iucnstatus',
            name='category',
            field=models.CharField(blank=True, choices=[('LC', 'Least concern'), ('NT', 'Near threatened'), ('VU', 'Vulnerable'), ('EN', 'Endangered'), ('CR', 'Critically endangered'), ('EW', 'Extinct in the wild'), ('EX', 'Extinct'), ('DD', 'Data deficient'), ('NE', 'Not evaluated')], default='', max_length=50),
        ),
        migrations.AlterField(
            model_name='iucnstatus',
            name='colour',
            field=colorfield.fields.ColorField(default='#009106', max_length=18),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='additional_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Additional json data'),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='creator',
            field=models.ForeignKey(blank=True, help_text='The creator of the site', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='site_creator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='latitude',
            field=models.FloatField(blank=True, help_text='Latitude of location site', null=True),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='legacy_site_code',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='location_context',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='This is intended for filtering', null=True, verbose_name='Formatted location_context_document'),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='location_context_document',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='This document is generated from GeoContext by using management command or changing the geometry.', null=True, verbose_name='Document for location context as JSON.'),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='longitude',
            field=models.FloatField(blank=True, help_text='Longitude of location site', null=True),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='original_geomorphological',
            field=models.CharField(blank=True, help_text='Original geomorphological zone from spatial layer', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='refined_geomorphological',
            field=models.CharField(blank=True, choices=[('Source zone', 'Source zone'), ('Mountain headwater stream', 'Mountain headwater stream'), ('Mountain stream', 'Mountain stream'), ('Transitional', 'Transitional'), ('Upper foothill', 'Upper foothill'), ('Lower foothill', 'Lower foothill'), ('Lowland river', 'Lowland river'), ('Rejuvenated bedrock fall / cascades', 'Rejuvenated bedrock fall / cascades'), ('Rejunevated foothill', 'Rejunevated foothill'), ('Upland floodplain', 'Upland floodplain'), ('Upland transitional', 'Upland transitional'), ('Foothil/Transitional', 'Foothil/Transitional'), ('Upland plateau', 'Upland plateau'), ('Foothill', 'Foothill')], help_text='Would be used in preference to the one discovered in geocontext', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='river',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sass.River'),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='site_code',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterField(
            model_name='locationsite',
            name='site_description',
            field=models.CharField(blank=True, default='', max_length=500),
        ),
        migrations.AlterField(
            model_name='nonbiodiversitylayer',
            name='order',
            field=models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order'),
        ),
        migrations.AlterField(
            model_name='nonbiodiversitylayer',
            name='wms_format',
            field=models.CharField(default='image/png', max_length=64),
        ),
        migrations.AlterField(
            model_name='profile',
            name='data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='', null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='full_name',
            field=models.CharField(blank=True, default='', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='other',
            field=models.CharField(blank=True, default='', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='qualifications',
            field=models.CharField(blank=True, default='', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='rivercatchment',
            name='location_sites',
            field=models.ManyToManyField(blank=True, related_name='location_sites', to='bims.LocationSite'),
        ),
        migrations.AlterField(
            model_name='rivercatchment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.RiverCatchment', verbose_name='Parent'),
        ),
        migrations.AlterField(
            model_name='searchprocess',
            name='category',
            field=models.CharField(choices=[('cluster_generation', 'Cluster Generation'), ('search_results', 'Search Results'), ('sites_summary', 'Site Summary'), ('taxon_summary', 'Taxon Summary')], max_length=50),
        ),
        migrations.AlterField(
            model_name='shapefile',
            name='shapefile',
            field=models.FileField(upload_to='shapefile/'),
        ),
        migrations.AlterField(
            model_name='siteimage',
            name='image',
            field=models.ImageField(upload_to='site_images'),
        ),
        migrations.AlterField(
            model_name='spatialscale',
            name='from_geocontext',
            field=models.BooleanField(default=True, help_text='Is this data come from geocontext?'),
        ),
        migrations.AlterField(
            model_name='spatialscale',
            name='type',
            field=models.CharField(choices=[('input', 'Input'), ('select', 'Select')], max_length=50),
        ),
        migrations.AlterField(
            model_name='spatialscalegroup',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.SpatialScaleGroup', verbose_name='Parent'),
        ),
        migrations.AlterField(
            model_name='taxongroup',
            name='category',
            field=models.CharField(blank=True, choices=[('SPECIES_MODULE', 'Species Module'), ('SPECIES_CLASS', 'Species Class'), ('SASS_TAXON_GROUP', 'SASS Taxon Group'), ('DIVISION_GROUP', 'Division Group')], max_length=50, verbose_name='Taxonomic Group Category'),
        ),
        migrations.AlterField(
            model_name='taxongroup',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to='module_logo'),
        ),
        migrations.AlterField(
            model_name='taxongroup',
            name='source_collection',
            field=models.CharField(blank=True, help_text='Additional filter for search collections', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='taxongroup',
            name='taxonomies',
            field=models.ManyToManyField(blank=True, to='bims.Taxonomy'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='author',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='canonical_name',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Canonical Name'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='endemism',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.Endemism', verbose_name='Endemism'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='gbif_key',
            field=models.IntegerField(blank=True, null=True, verbose_name='GBIF Key'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='iucn_data',
            field=models.TextField(blank=True, null=True, verbose_name='Data from IUCN'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='iucn_redlist_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='IUCN taxon id'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='iucn_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.IUCNStatus', verbose_name='IUCN status'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.Taxonomy', verbose_name='Parent'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='rank',
            field=models.CharField(blank=True, choices=[('SUBSPECIES', 'Sub Species'), ('SPECIES', 'Species'), ('GENUS', 'Genus'), ('FAMILY', 'Family'), ('SUPERFAMILY', 'Super Family'), ('ORDER', 'Order'), ('CLASS', 'Class'), ('SUBCLASS', 'Sub Class'), ('PHYLUM', 'Phylum'), ('KINGDOM', 'Kingdom'), ('DOMAIN', 'Domain'), ('LIFE', 'Life'), ('CULTIVAR_GROUP', 'Cultivar Group'), ('SUBORDER', 'Sub Order'), ('INFRAORDER', 'Infra Order'), ('SUBFAMILY', 'Sub Family')], max_length=50, verbose_name='Taxonomic Rank'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='scientific_name',
            field=models.CharField(max_length=200, verbose_name='Scientific Name'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='taxonomic_status',
            field=models.CharField(blank=True, choices=[('ACCEPTED', 'Accepted'), ('DOUBTFUL', 'Doubtful'), ('SYNONYM', 'Synonym'), ('HETEROTYPIC_SYNONYM', 'Heterotypic Synonym'), ('HOMOTYPIC_SYNONYM', 'Homotypic Synonym'), ('PROPARTE_SYNONYM', 'Proparte Synonym'), ('MISAPPLIED', 'Misapplied')], max_length=50, verbose_name='Taxonomic Status'),
        ),
        migrations.AlterField(
            model_name='taxonomy',
            name='vernacular_names',
            field=models.ManyToManyField(blank=True, to='bims.VernacularName'),
        ),
        migrations.CreateModel(
            name='SourceReferenceBibliography',
            fields=[
                ('sourcereference_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bims.SourceReference')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='documents.Document')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='td_biblio.Entry')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('bims.sourcereference',),
        ),
        migrations.CreateModel(
            name='SourceReferenceDatabase',
            fields=[
                ('sourcereference_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bims.SourceReference')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='documents.Document')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.DatabaseRecord')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('bims.sourcereference',),
        ),
        migrations.CreateModel(
            name='SourceReferenceDocument',
            fields=[
                ('sourcereference_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bims.SourceReference')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documents.Document')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('bims.sourcereference',),
        ),
        migrations.DeleteModel(
            name='Taxon',
        ),
        migrations.AddField(
            model_name='uploadsession',
            name='module_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bims.TaxonGroup'),
        ),
        migrations.AddField(
            model_name='uploadsession',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upload_session_uploader', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='surveydatavalue',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.Survey'),
        ),
        migrations.AddField(
            model_name='surveydatavalue',
            name='survey_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.SurveyData'),
        ),
        migrations.AddField(
            model_name='surveydatavalue',
            name='survey_data_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.SurveyDataOption'),
        ),
        migrations.AddField(
            model_name='locationcontextfiltergrouporder',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.LocationContextGroup'),
        ),
        migrations.AddField(
            model_name='locationcontextfilter',
            name='location_context_groups',
            field=models.ManyToManyField(through='bims.LocationContextFilterGroupOrder', to='bims.LocationContextGroup'),
        ),
        migrations.AddField(
            model_name='locationcontext',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bims.LocationContextGroup'),
        ),
        migrations.AddField(
            model_name='locationcontext',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bims.LocationSite'),
        ),
        migrations.AddField(
            model_name='harvestsession',
            name='module_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bims.TaxonGroup'),
        ),
        migrations.AddField(
            model_name='dashboardconfiguration',
            name='module_group',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bims.TaxonGroup'),
        ),
        migrations.AddField(
            model_name='chemicalrecord',
            name='location_site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemical_collection_record', to='bims.LocationSite'),
        ),
        migrations.AddField(
            model_name='chemicalrecord',
            name='source_reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.SourceReference'),
        ),
        migrations.AddField(
            model_name='chemicalrecord',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chemical_collection_record', to='bims.Survey'),
        ),
        migrations.AddField(
            model_name='bimsdocument',
            name='authors',
            field=models.ManyToManyField(blank=True, through='bims.BimsDocumentAuthorship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bimsdocument',
            name='document',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='documents.Document'),
        ),
        migrations.AddField(
            model_name='algaedata',
            name='survey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='algae_data', to='bims.Survey'),
        ),
        migrations.AddField(
            model_name='biologicalcollectionrecord',
            name='source_reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bims.SourceReference'),
        ),
    ]
